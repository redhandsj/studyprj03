★Seasar2_徹底入門.pdf
 - (CHAPTER 08) エンティティ (P.317 - 334)
しおり　：　
URL　:　

★ 2017/11/13(月)に、新規作成

//==========================================================================================================
// 8.1 　エンティティ定義のためのアノテーション
//==========================================================================================================
- P.318 の表8.1


//==========================================================================================================
// 8.2　 エンティティの定義
//==========================================================================================================
 - /s2jdbc/src/main/java/org/ex/entity
■8.2.1 フィールドの定義
 -

■8.2.2 日時を扱うフィールド
 - @Temporal

■8.2.3 ラージオブジェクト
 - @Lob

■8.2.4 永続化対象外のフィールド
 - @Transient

■8.2.5 フェッチ対象外フィールド
 - @Basic


//==========================================================================================================
// 8.3　 主キーの設定
//==========================================================================================================
■8.3.1 GenerationType.TABLE
 - @GenerateValue(straregy = GenerationType.TABLE)
 - 採番テーブル(ID_GENERATOR)を作成し、採番用レコードを作成する必要がある


■8.3.2 GenerationType.SEQUENCE
 - @GenerateValue(straregy = GenerationType.SEQUENCE)
 - 各テーブルに「テーブル名_主キー」でシーケンスを作成する必要がある

■8.3.3 GenerationType.IDENTITY
 - DB特有の機能を使い主キーを自動生成

//==========================================================================================================
// 8.4　 関連の定義
//==========================================================================================================
■8.4.1 多対一の関連
 - @ManyToOne

■8.4.2 一対多の関連
 - @OneToMany(mappedBy = 相手側にある自分の変数名)
  public class Department {
    ...
    @OneToMany(mappedBy = "department")
    public List<Employee> employeeList;
  }

■8.4.3 一対一の関連
 - @OneToOne


■8.4.4 ジョインに使用するカラムの指定
 - @JoinColumn(name = "DEPT_ID", referencedColumnName = "ID")

  @Entity
  public class Employee {
    ...
    @Column
    public Integer deptId;

    @ManyToOne
    @JoinColumn(name = "DEPT_ID", referencedColumnName = "ID")
    public Dept dept;
  }

■8.4.5 多対多の関連
 - @ManyToMany

  // 注文情報のエンティティ
  @Entity
  public class OrderInfo {

    @Id
    public Long id;

    @OneToMany(mappedBy = "orderInfo")
    public List<OrderItemRel> orderItemRelList;
  }

  // 商品情報のエンティティ
  @Entity
  public class ItemInfo {
    @Id
    public Long id;

    @OneToMany(mappedBy = "orderInfo")
    public List<OrderItemRel> orderItemRelList;
  }

  // 商品情報と注文情報を示す
  @Entity
  public class OrderItemRel {

    @Id
    public Long orderInfoId;

    @Id
    public Long itemInfoId;

    @ManyToOne
    @JoinColumn(name = "ITEM_INFO_ID", referencedColumnName = "ID")
    public ItemInfo itemInfo;

    @ManyToOne
    @JoinColumn(name = "OEDER_INFO_ID", referencedColumnName = "ID")
    public OrderInfo orderInfo;
  }



//==========================================================================================================
// 8.5　 列挙型の利用
//==========================================================================================================
 - @Enumerated


//==========================================================================================================
// 8.6　 エンティティの継承
//==========================================================================================================
 - 親クラスのエンティティは永続対象外
 - @MappedSuperclass アノテーション

  @MappedSuperclass
  public abstract class AbstractEntity {
    public Timestamp insertDate;
    public Timestamp updatetDate;
  }

  @Entity
  public class Employee extends AbstractEntity {
    @Id
    public long employeeId;
    public String name;
  }


//==========================================================================================================
// 8.7　 エンティティのマッピングルールの変更
//==========================================================================================================
 - @Table / @Column を省略した場合のルール

    (エンティティ) ⇔ (テーブル)
    employee   ⇔ EMPLOYEE
    employeeId ⇔ EMPLOYEE_ID
    employeeid ⇔ EMPLOYEEID

    → /s2jdbc/src/main/resources/convention.dicon


//==========================================================================================================
//==========================================================================================================
// 問題
//==========================================================================================================


//==========================================================================================================
// 未整頓メモ
//==========================================================================================================


//==========================================================================================================
// <END>
//==========================================================================================================
